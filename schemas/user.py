from flask import url_for
from marshmallow import Schema, fields
from utils import hash_password


# id: Use fields.Int() to represent an integer. In addition, dump_only=True means that this property is only available for serialization, not deserialization. This is because id is autogenerated, not passed in by the user.
# username: Use fields.String() to represent a string and apply required=True to indicate that this property is mandatory. When the client sends JSON data without the username, there will be a validation error.
# email: Use fields.Email() to indicate that email format is needed, and apply required=True to indicate that this property is mandatory.
# password:fields.Method() is a Method field. The Method field here receives an optional deserialize argument, which defines how the field should be deserialized. We use deserialize='load_password' to indicate that the load_password(self, value) method will be invoked when using load() deserialization. Please note that this load_password(self, value) method will only be invoked during load() deserialization.
# created_at:fields.DateTime() represents the time format, and dump_only=True means that this property will only be available in serialization.
# updated_at:fields.DateTime() represents the time format, and dump_only=True means that this property will only be available in serialization.
class UserSchema(Schema):
    class Meta:
        ordered = True
    id = fields.Int(dump_only=True)
    username = fields.String(required=True)
    email = fields.Email(required=True)
    password = fields.Method(required=True, deserialize='load_password')
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)
    avatar_url = fields.Method(serialize='dump_avatar_url')

    @staticmethod
    def load_password(value):
        return hash_password(value)

    @staticmethod
    def dump_avatar_url(user):
        # _external 绝对url 这样图片会存储在server中 而非本地
        if user.avatar_image:
            return url_for('static', filename='images/avatars/{}'.format(user.avatar_image), _external=True)
        else:
            return url_for('static', filename='images/assets/default-avatar.jpg', _external=True)
